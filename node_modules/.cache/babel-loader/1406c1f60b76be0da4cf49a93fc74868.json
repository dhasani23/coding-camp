{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _createSuper from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _inherits from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Circle, CircleWarp, ParticlesInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkRandomColor } from \"../../../Utils\";\n\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n  var distance = getDistance(pos1, pos2);\n\n  if (!warp || distance <= optDistance) {\n    return distance;\n  }\n\n  var pos2NE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y\n  };\n  distance = getDistance(pos1, pos2NE);\n\n  if (distance <= optDistance) {\n    return distance;\n  }\n\n  var pos2SE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SE);\n\n  if (distance <= optDistance) {\n    return distance;\n  }\n\n  var pos2SW = {\n    x: pos2.x,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SW);\n  return distance;\n}\n\nexport var Linker = /*#__PURE__*/function (_ParticlesInteractorB) {\n  _inherits(Linker, _ParticlesInteractorB);\n\n  var _super = _createSuper(Linker);\n\n  function Linker(container) {\n    _classCallCheck(this, Linker);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Linker, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.options.links.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(p1) {\n        var _a, pos1, container, canvasSize, linkOpt1, optOpacity, optDistance, warp, range, query, _iterator, _step, p2, linkOpt2, pos2, distance, opacityLine;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                p1.links = [];\n                pos1 = p1.getPosition();\n                container = this.container;\n                canvasSize = container.canvas.size;\n\n                if (!(pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                linkOpt1 = p1.options.links;\n                optOpacity = linkOpt1.opacity;\n                optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : container.retina.linksDistance;\n                warp = linkOpt1.warp;\n                range = warp ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Circle(pos1.x, pos1.y, optDistance);\n                query = container.particles.quadTree.query(range);\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 13;\n\n                _iterator.s();\n\n              case 15:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 31;\n                  break;\n                }\n\n                p2 = _step.value;\n                linkOpt2 = p2.options.links;\n\n                if (!(p1 === p2 || !linkOpt2.enable || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || p1.links.map(function (t) {\n                  return t.destination;\n                }).indexOf(p2) !== -1 || p2.links.map(function (t) {\n                  return t.destination;\n                }).indexOf(p1) !== -1)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 29);\n\n              case 20:\n                pos2 = p2.getPosition();\n\n                if (!(pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 29);\n\n              case 23:\n                distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n\n                if (!(distance > optDistance)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 26:\n                opacityLine = (1 - distance / optDistance) * optOpacity;\n                this.setColor(p1);\n                p1.links.push({\n                  destination: p2,\n                  opacity: opacityLine\n                });\n\n              case 29:\n                _context.next = 15;\n                break;\n\n              case 31:\n                _context.next = 36;\n                break;\n\n              case 33:\n                _context.prev = 33;\n                _context.t0 = _context[\"catch\"](13);\n\n                _iterator.e(_context.t0);\n\n              case 36:\n                _context.prev = 36;\n\n                _iterator.f();\n\n                return _context.finish(36);\n\n              case 39:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 33, 36, 39]]);\n      }));\n\n      function interact(_x) {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"setColor\",\n    value: function setColor(p1) {\n      var container = this.container;\n      var linksOptions = p1.options.links;\n      var linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);\n\n      if (!linkColor) {\n        var optColor = linksOptions.color;\n        linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n\n        if (linksOptions.id === undefined) {\n          container.particles.linksColor = linkColor;\n        } else {\n          container.particles.linksColors.set(linksOptions.id, linkColor);\n        }\n      }\n    }\n  }]);\n\n  return Linker;\n}(ParticlesInteractorBase);","map":{"version":3,"sources":["C:/Users/david/OneDrive/Desktop/Misc/CodingCampSite/coding-camp/node_modules/tsparticles/esm/Interactions/Particles/Links/Linker.js"],"names":["Circle","CircleWarp","ParticlesInteractorBase","getDistance","getLinkRandomColor","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","distance","pos2NE","x","width","y","pos2SE","height","pos2SW","Linker","container","particle","options","links","enable","p1","getPosition","canvas","size","linkOpt1","optOpacity","opacity","_a","retina","linksDistance","range","query","particles","quadTree","p2","linkOpt2","id","spawning","destroyed","map","t","destination","indexOf","opacityLine","setColor","push","linksOptions","linkColor","undefined","linksColor","linksColors","get","optColor","color","blink","consent","set"],"mappings":"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","sourcesContent":["import { Circle, CircleWarp, ParticlesInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkRandomColor } from \"../../../Utils\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    let distance = getDistance(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const pos2NE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y,\n    };\n    distance = getDistance(pos1, pos2NE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SW = {\n        x: pos2.x,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SW);\n    return distance;\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        return particle.options.links.enable;\n    }\n    reset() {\n    }\n    async interact(p1) {\n        var _a;\n        p1.links = [];\n        const pos1 = p1.getPosition();\n        const container = this.container;\n        const canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links;\n        const optOpacity = linkOpt1.opacity;\n        const optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : container.retina.linksDistance;\n        const warp = linkOpt1.warp;\n        const range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance);\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                p1.links.map((t) => t.destination).indexOf(p2) !== -1 ||\n                p2.links.map((t) => t.destination).indexOf(p1) !== -1) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                return;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this.setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    setColor(p1) {\n        const container = this.container;\n        const linksOptions = p1.options.links;\n        let linkColor = linksOptions.id === undefined\n            ? container.particles.linksColor\n            : container.particles.linksColors.get(linksOptions.id);\n        if (!linkColor) {\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}