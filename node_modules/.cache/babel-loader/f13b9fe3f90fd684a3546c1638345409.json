{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _createSuper from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _inherits from \"C:\\\\Users\\\\david\\\\OneDrive\\\\Desktop\\\\Misc\\\\CodingCampSite\\\\coding-camp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport var Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, container, options, interactivity, mousePos, distance, query, _iterator, _step, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n\n                if (!(interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 7;\n\n                _iterator.s();\n\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 24;\n                  break;\n                }\n\n                particle = _step.value;\n                pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n\n                if (!(pointDistance <= distance)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n                if (!(opacityLine <= 0)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 22);\n\n              case 16:\n                optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n                if (!container.particles.grabLineColor) {\n                  linksOptions = options.interactivity.modes.grab.links;\n                  container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n\n                colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n                if (colorLine) {\n                  _context.next = 21;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 21:\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n\n              case 22:\n                _context.next = 9;\n                break;\n\n              case 24:\n                _context.next = 29;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t0 = _context[\"catch\"](7);\n\n                _iterator.e(_context.t0);\n\n              case 29:\n                _context.prev = 29;\n\n                _iterator.f();\n\n                return _context.finish(29);\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 26, 29, 32]]);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["C:/Users/david/OneDrive/Desktop/Misc/CodingCampSite/coding-camp/node_modules/tsparticles/esm/Interactions/External/Grab/Grabber.js"],"names":["Constants","ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","Grabber","container","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","options","status","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","_a","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["import { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}